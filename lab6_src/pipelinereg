#!/usr/bin/perl -w
use lib "/usr/local/netfpga/lib/Perl5";
use strict;

my $PIPELINE_ENABLE = 0x2000200;
my $INS_WE = 0x2000204;
my $INS_WADDR = 0x2000208;
my $INS_WDATA = 0x200020c;
my $DATA_RE = 0x2000210;
my $DATA_WE = 0x2000214;
my $DATA_WDATA_1 = 0x2000218;
my $DATA_WDATA_0 = 0x200021c;
my $DATA_ADDR = 0x2000220;

# Read-only
my $DATA_RDATA_1 = 0x2000224;
my $DATA_RDATA_0 = 0x2000228;

sub regwrite {
   my( $addr, $value ) = @_;
   my $cmd = sprintf( "regwrite $addr 0x%08x", $value );
   my $result = `$cmd`;
   # print "Ran command '$cmd' and got result '$result'\n";
}

sub regread {
   my( $addr ) = @_;
   my $cmd = sprintf( "regread $addr" );
   my @out = `$cmd`;
   my $result = $out[0];
   if ( $result =~ m/Reg (0x[0-9a-f]+) \((\d+)\):\s+(0x[0-9a-f]+) \((\d+)\)/ ) {
      $result = $3;
   }
   return $result;
}

sub initialize {
   regwrite( $DATA_WE, 0x1 );
   regwrite( $DATA_ADDR, 0x0 );
   regwrite( $DATA_WDATA_0, 0x4 );
   regwrite( $DATA_WDATA_1, 0x0 );
   regwrite( $DATA_ADDR, 0x4 );
   regwrite( $DATA_WDATA_0, 0x64 );
   regwrite( $DATA_WDATA_1, 0x0 );
   regwrite( $DATA_WE, 0x0 );

   regwrite( $INS_WE, 0x1 );
   regwrite( $INS_WADDR, 0x0 );
   regwrite( $INS_WDATA, 0x40400000 );
   regwrite( $INS_WADDR, 0x1 );
   regwrite( $INS_WDATA, 0x40600000 );
   regwrite( $INS_WADDR, 0x2 );
   regwrite( $INS_WDATA, 0x0 );
   regwrite( $INS_WADDR, 0x3 );
   regwrite( $INS_WDATA, 0x0 );
   regwrite( $INS_WADDR, 0x4 );
   regwrite( $INS_WDATA, 0x0 );
   regwrite( $INS_WADDR, 0x5 );
   regwrite( $INS_WDATA, 0x93000000 );
   regwrite( $INS_WE, 0x0 );
}

sub start {
   regwrite( $PIPELINE_ENABLE, 0x1 );
}

sub stop {
   regwrite( $PIPELINE_ENABLE, 0x0 );
}

sub usage {
   print "Usage: idsreg <cmd> <cmd options>\n";
   print "  Commands:\n";
   print "    start                start pipeline\n";
   print "    stop                 stop pipeline\n";
   print "    initialize           load preset instructions\n";
   print "    readmem <addr>       read data mem at <addr>\n";
   print "    regdump              dump all registers\n";
}

sub readmem {
   my $addr = @_;
   regwrite( $DATA_RE, 0x1 );
   regwrite( $DATA_ADDR, $addr );
   my $lo = regread( $DATA_RDATA_0 );
   my $hi = regread( $DATA_RDATA_1 );
   regwrite( $DATA_RE, 0x0 );
   return ($hi, $lo);
}

my $numargs = $#ARGV + 1;
if( $numargs < 1 ) {
   usage();
   exit(1);
}
my $cmd = $ARGV[0];
if ($cmd eq "initialize") {
   initialize();
} elsif ($cmd eq "readmem") {
   if ($numargs < 2) {
      usage();
      exit(1);
   }
   my $str = $ARGV[1];
   my ($addr, $value) = readmem($str);
   printf("D-Mem @ 0x%08x : 0x%08x\n", $addr, $value);   
} elsif ($cmd eq "start") {
   start();
} elsif ($cmd eq "stop") {
   stop();
} elsif ($cmd eq "regdump") {
   print "Pipeline Enable: " . regread($PIPELINE_ENABLE) . "\n";
   print "Instruction WE: " . regread($INS_WE) . "\n";
   print "Instruction WADDR: " . regread($INS_WADDR) . "\n";
   print "Instruction WDATA: " . regread($INS_WDATA) . "\n";
   print "Data RE: " . regread($DATA_RE) . "\n";
   print "Data WE: " . regread($DATA_WE) . "\n";
   print "Data WDATA 1: " . regread($DATA_WDATA_1) . "\n";
   print "Data WDATA 0: " . regread($DATA_WDATA_0) . "\n";
   print "Data ADDR: " . regread($DATA_ADDR) . "\n";
   print "Data RDATA 1: " . regread($DATA_RDATA_1) . "\n";
   print "Data RDATA 0: " . regread($DATA_RDATA_0) . "\n";
} else {
   print "Unrecognized command $cmd\n";
   usage();
   exit(1)
}

